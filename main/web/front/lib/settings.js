var _=Object.defineProperty,q=Object.defineProperties;var z=Object.getOwnPropertyDescriptors;var P=Object.getOwnPropertySymbols;var G=Object.prototype.hasOwnProperty,X=Object.prototype.propertyIsEnumerable;var O=(a,o,r)=>o in a?_(a,o,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[o]=r,m=(a,o)=>{for(var r in o||(o={}))G.call(o,r)&&O(a,r,o[r]);if(P)for(var r of P(o))X.call(o,r)&&O(a,r,o[r]);return a},S=(a,o)=>q(a,z(o));const App=()=>{var M,x;const[a,o]=React.useState(!1),[r,p]=React.useState(!0),[N,y]=React.useState(null),[T,k]=React.useState(0),[R,W]=React.useState({freeHeap:0,socTemp:0}),[n,C]=React.useState({deviceInfo:{name:"TBD",firmwareVersion:"TBD",hardwareVersion:"TBD",macAddress:"00:00:00:00:00:00"},power:{sleepTimeout:60,deepSleepTimeout:180,lowPowerMode:!1,enableSleep:!0,deepSleep:!0,separateSleepTimeouts:!0,highSpeedSubmode:"slow"},led:{brightness:80},connectivity:{bleTxPower:"low",bleReconnectDelay:3}}),[B,D]=React.useState(null),[L,U]=React.useState("info"),[I,E]=React.useState(0),[f,h]=React.useState(!1),c=React.useRef(null),w=React.useRef(null),b=React.useRef(null),v=React.useRef(null),F=()=>{const t=Date.now();if(T>0&&t-T>1500){if(o(!1),p(!0),c.current&&c.current.readyState!==WebSocket.CLOSED)try{c.current.close()}catch(e){console.error("Error closing socket:",e)}setTimeout(g,1e3)}};React.useEffect(()=>(g(),w.current=setInterval(F,1e3),()=>{c.current&&c.current.close(),w.current&&clearInterval(w.current)}),[]);const g=()=>{p(!0),y(null);const e=`${window.location.protocol==="https:"?"wss:":"ws:"}//${window.location.host}/ws`,s=new WebSocket(e);c.current=s,s.onopen=()=>{console.log("WebSocket connected"),o(!0),p(!1),k(Date.now()),H()},s.onclose=()=>{console.log("WebSocket disconnected"),o(!1),p(!0),setTimeout(g,1e3)},s.onerror=i=>{console.error("WebSocket error:",i),y("Failed to connect to the device. Please try again later."),p(!1)},s.onmessage=i=>{$(i.data)}},$=t=>{k(Date.now());try{const e=JSON.parse(t);switch(e.type){case"ota_progress":if(e.content&&e.content.progress!==void 0){const s=typeof e.content=="string"?JSON.parse(e.content).progress:e.content.progress;E(s),s===100&&(l("OTA update completed successfully! Device will reboot.","success"),setTimeout(()=>{h(!1)},2e3))}break;case"settings":if(e.content){const s=m(m({},n),e.content);C(s),v.current||(v.current=JSON.stringify(s))}break;case"settings_update_status":e.content.success?l("Settings updated successfully. The device is restarting.","success"):l(`Failed to update settings: ${e.content.error}`,"error");break;case"log":console.log("Server log:",e.content);break;case"ping":if(e.content)try{const s=typeof e.content=="string"?JSON.parse(e.content):e.content;W({freeHeap:s.freeHeap||0,socTemp:s.socTemp||0})}catch(s){console.error("Error parsing ping data:",s)}break;default:console.log("Unknown message type:",e.type)}}catch(e){console.error("Error parsing WebSocket message:",e)}},H=()=>{if(!c.current||c.current.readyState!==WebSocket.OPEN){l("WebSocket not connected.","error");return}c.current.send(JSON.stringify({type:"command",command:"get_settings"}))},J=()=>{if(!c.current||c.current.readyState!==WebSocket.OPEN){l("WebSocket not connected.","error");return}c.current.send(JSON.stringify({type:"command",command:"update_settings",content:n})),l("Saving settings...","info")},d=(t,e,s)=>{C(i=>{if(t==="power"){if(e==="sleepTimeout"&&(s<20||s>1800))return l("Sleep timeout must be between 20 and 1800 seconds.","error"),i;if(e==="deepSleepTimeout"){if(s<20||s>99999)return l("Deep sleep timeout must be between 20 and 99999 seconds.","error"),i;if(i.power.separateSleepTimeouts&&s<=i.power.sleepTimeout)return l("Deep sleep timeout must be greater than sleep timeout.","error"),i}}return S(m({},i),{[t]:S(m({},i[t]),{[e]:s})})})},l=(t,e)=>{D(t),U(e),window.scrollTo(0,0),setTimeout(()=>{D(null)},15e3)};return r||!a?React.createElement("div",{id:"loadingContainer"},React.createElement("div",{className:"spinner"}),React.createElement("p",null,a?"Loading settings":"Waiting for connection...")):N?React.createElement("div",{className:"container"},React.createElement("div",{className:"status error"},N),React.createElement("button",{onClick:g},"Retry Connection")):React.createElement("div",null,React.createElement("h1",null,"Device Settings"),React.createElement("div",{className:"container"},B&&React.createElement("div",{className:`status ${L}`},B),React.createElement("button",{onClick:J,disabled:!a||f||v.current&&JSON.stringify(n)===v.current},"Save & Reboot"),React.createElement("button",{onClick:()=>window.location.href="/",style:{marginLeft:"10px",backgroundColor:"#6c757d"},disabled:f},"Return"),React.createElement("div",{className:"setting-group"},React.createElement("h2",null,"Device Information"),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Firmware version"),React.createElement("div",null,n.deviceInfo.firmwareVersion)),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Hardware revision"),React.createElement("div",null,n.deviceInfo.hardwareVersion)),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"MAC address"),React.createElement("div",null,n.deviceInfo.macAddress)),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Free heap"),React.createElement("div",null,(R.freeHeap/1e3).toFixed(0)," kb")),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"SoC temperature"),React.createElement("div",null,R.socTemp.toFixed(0),"\xB0C"))),React.createElement("div",{className:"setting-group"},React.createElement("h2",null,"Connectivity"),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"BLE report rate"),React.createElement("div",{className:"setting-description"},"For high speed (polling rate) devices, it is possible to choose higher BLE report rate. Please note that it is not supported by the BLE standard and may or may not work in your case. This option will not affect normal speed (125 rps) devices in any way. Values are calculated for a 1000 Hz USB device."),React.createElement("select",{value:n.power.highSpeedSubmode,onChange:t=>d("power","highSpeedSubmode",t.target.value)},React.createElement("option",{value:"slow"},"\xB1135 rps"),React.createElement("option",{value:"fast"},"\xB1240 rps"),React.createElement("option",{value:"veryfast"},"\xB1315 rps"))),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"BLE TX power"),React.createElement("div",{className:"setting-description"},"Bluetooth transmission power level."),React.createElement("select",{value:n.connectivity.bleTxPower,onChange:t=>d("connectivity","bleTxPower",t.target.value)},React.createElement("option",{value:"n6"},"-6 dB"),React.createElement("option",{value:"n3"},"-3 dB"),React.createElement("option",{value:"n0"},"0 dB"),React.createElement("option",{value:"p3"},"+3 dB"),React.createElement("option",{value:"p6"},"+6 dB"),React.createElement("option",{value:"p9"},"+9 dB"))),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Reconnect delay"),React.createElement("div",{className:"setting-description"},"Delay in seconds before attempting to reconnect after Bluetooth disconnect. Doesn't affect waking up from sleep."),React.createElement("input",{type:"number",min:"1",max:"60",value:n.connectivity.bleReconnectDelay,onChange:t=>d("connectivity","bleReconnectDelay",parseInt(t.target.value))}))),React.createElement("div",{className:"setting-group"},React.createElement("h2",null,"Power"),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Enable sleep"),React.createElement("div",{className:"setting-description"},"Enable device to enter sleep mode and disable Bluetooth when no events received in the time window."),React.createElement("label",{className:"toggle-switch"},React.createElement("input",{type:"checkbox",checked:n.power.enableSleep,onChange:t=>d("power","enableSleep",t.target.checked)}),React.createElement("span",{className:"slider"}))),React.createElement("div",{className:n.power.enableSleep?"animate-visible":"animate-hidden"},React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Deep sleep"),React.createElement("div",{className:"setting-description"},"When enabled, USB device will not be able to wake up the device. You will have to press any button on the device itself."),React.createElement("label",{className:"toggle-switch"},React.createElement("input",{type:"checkbox",checked:n.power.deepSleep,onChange:t=>d("power","deepSleep",t.target.checked)}),React.createElement("span",{className:"slider"}))),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Separate sleep timeouts"),React.createElement("div",{className:"setting-description"},"If disabled, the device will go into the deep sleep immediately after entering light sleep."),React.createElement("label",{className:"toggle-switch"},React.createElement("input",{type:"checkbox",checked:n.power.separateSleepTimeouts,onChange:t=>d("power","separateSleepTimeouts",t.target.checked)}),React.createElement("span",{className:"slider"}))),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},n.power.separateSleepTimeouts?"Light sleep timeout":"Sleep timeout"),React.createElement("div",{className:"setting-description"},"Time without USB events in seconds before device enters light sleep mode. In light sleep, Bluetooth is turned off but the device still awaits for USB events to turn it on immediately."),React.createElement("input",{type:"number",min:"0",max:"3600",value:n.power.sleepTimeout,onChange:t=>d("power","sleepTimeout",parseInt(t.target.value))})),React.createElement("div",{className:`setting-item ${n.power.separateSleepTimeouts&&n.power.deepSleep?"animate-visible":"animate-hidden"}`},React.createElement("div",{className:"setting-title"},"Deep sleep timeout"),React.createElement("div",{className:"setting-description"},"Time without USB events in seconds before device enters deep sleep mode. In deep sleep, the device will do nothing and only wake up when you press any button on the bridge device itself."),React.createElement("input",{type:"number",min:"0",max:"3600",value:n.power.deepSleepTimeout,onChange:t=>d("power","deepSleepTimeout",parseInt(t.target.value))})))),React.createElement("div",{className:"setting-group"},React.createElement("h2",null,"Visuals"),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-title"},"Brightness"),React.createElement("div",{className:"setting-description"},"Global LED brightness percentage."),(()=>{const e=React.useMemo(()=>Math.log(10),[]),s=React.useMemo(()=>Math.log(100),[]),i=React.useMemo(()=>(s-e)/90,[s,e]),A=React.useCallback(u=>Math.round((Math.log(u)-e)/i+10),[e,i,10]),V=React.useCallback(u=>Math.round(Math.exp(e+i*(u-10))),[e,i,10]);return React.createElement("input",{type:"range",min:"10",max:"100",value:A(n.led.brightness),onChange:u=>d("led","brightness",V(parseInt(u.target.value)))})})())),React.createElement("div",{className:"setting-group"},React.createElement("h2",null,"Firmware Update"),React.createElement("div",{className:"setting-item"},React.createElement("div",{className:"setting-description"},"Upload a new firmware file to update the device. The device will reboot after a successful update."),f?React.createElement("div",null,React.createElement("div",{className:"progress-container"},React.createElement("div",{className:"progress-bar",style:{width:`${I}%`}},I,"%")),React.createElement("p",null,"Uploading firmware...")):React.createElement("div",null,React.createElement("div",{className:"file-input-container"},React.createElement("input",{type:"file",ref:b,accept:".bin"})),React.createElement("button",{onClick:()=>{const t=b.current;if(!t||!t.files||t.files.length===0){l("Please select a firmware file","error");return}const e=t.files[0],s=new FormData;s.append("firmware",e),h(!0),E(0),l("Starting firmware upload...","info"),window.scrollTo(0,0),fetch("/upload",{method:"POST",body:s}).then(i=>{if(!i.ok)throw new Error(`HTTP error ${i.status}`);return i.text()}).then(i=>{console.log("Upload successful:",i)}).catch(i=>{console.error("Upload failed:",i),h(!1),l(`Upload failed: ${i.message}`,"error")})},disabled:!a||!((x=(M=b.current)==null?void 0:M.files)!=null&&x.length)},"Flash"))))))};ReactDOM.render(React.createElement(App,null),document.getElementById("root"));
